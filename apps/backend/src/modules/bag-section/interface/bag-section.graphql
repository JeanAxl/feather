type Item {
  id: ID!
  name: String!
  description: String!
  quantity: Int!
  weight: Float!
  bagSectionId: String!
}
type BagSection {
  id: ID!
  name: String!
  items: [Item!]!
}

type Query {
  bagSection(id: ID!): BagSection
  bagSections: [BagSection!]!
}

input AddItemInBagSectionInput {
  id: ID!
  name: String!
  bagSectionId: String!
  description: String
  quantity: Int
  weight: Float
}

input UpdateItemInBagSectionInput {
  id: ID!
  name: String
  description: String
  quantity: Int
  weight: Float
}

input UpdateBagSectionInput {
  id: String!
  name: String
}

type Mutation {
  updateBagSection(bagSectionId: ID, input: UpdateBagSectionInput): Boolean!
  updateItemInBagSection(input: UpdateItemInBagSectionInput): Boolean!
  addItemInBagSection(input: AddItemInBagSectionInput): Boolean!
  deleteItemInBagSection(itemId: ID!): Boolean!
}
